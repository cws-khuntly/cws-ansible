#=====  ANSIBLE   =============================================================
#          NAME:  build-nginx/tasks/run-postinstall.yml
#   DESCRIPTION:  Configure Zimbra maildrop post-installation
#==============================================================================
---
##
## Generate 2048 bit DH key
##
- name: (POSTINSTALL) Stop nginx (if running)
  service:
    name=nginx
    state=stopped
  ignore_errors: yes

- name: (POSTINSTALL) Stop Apache (if running)
  service:
    name=httpd
    state=stopped
  ignore_errors: yes

- name: (POSTINSTALL) Stop Zimbra (if running)
  service:
    name=zimbra
    state=stopped
  ignore_errors: yes

- name: (POSTINSTALL) Create nginx SSL directory
  file:
    path="{{ nginx_ssl_dir }}"
    state=directory

- name: (POSTINSTALL) Generate 2048 bit DH key for nginx (logjam)
  command: "/usr/bin/openssl dhparam -out {{ dhparam_output }} {{ dhparam_keysize }}"
  args:
    creates: "{{ dhparam_output }}"

##
## Update nginx config
##
- name: (POSTINSTALL) Apply nginx configuration updates
  template:
    src=nginx.j2
    dest="{{ nginx_conf }}"
    owner="{{ user_name }}"
    group="{{ group_name }}"
    mode=0644

- name: (POSTINSTALL) Apply auth.php
  template:
    src=auth.j2
    dest=/var/www/html/auth.php
    owner="{{ user_name }}"
    group="{{ group_name }}"
    mode=0600

- name: (POSTINSTALL) Fix onboard Apache
  replace:
    backup=yes
    dest=/etc/httpd/conf/httpd.conf
    regexp='^Listen 80'
    replace='Listen 127.0.0.1:81'
    validate="/usr/sbin/apachectl -f %s -t"

##
## Apply proxy config
##
- name: Apply Zimbra proxy configuration
  command: "{{ install_dir }}/libexec/zmproxyconfig -w -e -u -a 0:80:0:443 -x both -H {{ hostvars[inventory_hostname]['ansible_fqdn'] }}"
  become: yes
  become_user: zimbra
  become_method: sudo

##
## Create a self-signed certificate if necessary
##
- name: (POSTINSTALL) Creating self-signed server SSL cert
  command:
    openssl req -new
      -x509
      -nodes
      -extensions v3_ca
      -days {{ item.0.days|default(30) }}
      -subj "/C={{ item.0.country|default('US') }}/ST={{ item.0.state|default('New York') }}/L={{ item.0.city|default('Buffalo') }}/O={{ item.0.organization|default('Synacor, Inc') }}/OU={{ item.0.unit|default('Email Operations') }}/CN={{ item.1.domain }}/emailAddress={{ item.0.email|default('emailops@synacor.com') }}"
      -keyout {{ nginx_ssl_dir }}/{{ item.1.domain }}.key
      -out {{ nginx_ssl_dir }}/{{ item.1.domain }}.crt
  args:
    creates: "{{ nginx_ssl_dir }}/{{ item.1.domain }}.crt"
  with_together:
    - "{{ openssl_self_signed|default([]) }}"
    - "{{ hosts|default([]) }}"
  when: self_signed_enabled|bool

##
## POSTINSTALL COMPLETE
##
