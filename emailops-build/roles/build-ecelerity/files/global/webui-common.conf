# vim:ts=2:sw=2:et:ft=conf:
# Holds definitions needed by both ecelerity and eccmgr when used with
# the webui and user management database

Datasource "ecdb" {
  uri = ( "pgsql:dbname=ecelerity;user=ecuser" )
}

auth_ds {
  Scheme "ecauth" {
    Authenticate {
      query = "SELECT password from webconsole.users where username = :user"
      cache = "ecdb"
      map = [
        user = "%{username}"
      ]
      type = "md5"
      returns_password = "true"
      password_column = "password"
    }

    QueryGroups {
      query = "SELECT groupname from webconsole.groupassignments where username = :user"
      cache = "ecdb"
      group_column = "groupname"
      map = [
        user = "%{username}"
      ]
    }

    EnumGroups {
      query = "SELECT role from webconsole.roles"
      cache = "ecdb"
      group_column = "role"
    }
  }
}

# Following Authorization stanza does not have any effect, unless
# Enable_Authorization option for control listner is set to "true". 
# Authorization roles listed are standard roles already found in the system.  
Authorization {
  Role "root"{
    allow=(".*")
  }
  Role "admin"{
    allow=(".*")
  }
  Role "ecuser"{
    allow=(".*")
  }
  Role "users"{
    allow=(".*")
  }
}

# To configure auth based on LDAP credentials (possibly using Active 
# Directory), the following example stanzas may be used in place of
# the above (substituting the proper hostname, CN and DC).
#
# Datasource "ldap" {
#   uri = ( "ldap://ldap-server-hostname" )
#   no_cache = true
# }
# ds_ldap {
# }
# 
# auth_ds {
#   Scheme "ecauth" {
#     Authenticate {
#       query = "ldap:///????bindname=CN=$user%2cCN=UserGroup%2cDC=domain%2cx-bindpw=$pass"
#       cache = "ldap"
#       map = [
#         user = "%{username}"
#         pass = "%{password}"
#       ]
#     }
#   }
# }
